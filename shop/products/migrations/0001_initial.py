# Generated by Django 3.0.6 on 2020-06-21 16:38

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('cities_light', '0009_add_subregion'),
    ]

    operations = [
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('raise_list_times', models.PositiveSmallIntegerField(default=0)),
                ('colorful_list_days', models.DateField(blank=True, null=True, verbose_name='Colorful list days')),
                ('promo_days', models.DateField(blank=True, null=True, verbose_name='Promoted days')),
                ('slug', models.SlugField(max_length=160)),
                ('views', models.PositiveIntegerField(default=0)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='Price')),
                ('currency', models.CharField(choices=[('PLN', 'PLN'), ('EUR', 'EUR')], default='PLN', max_length=3, verbose_name='Currency')),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='Published day')),
                ('negotiate', models.BooleanField(default=False, verbose_name='Is price to negotiate')),
                ('title', models.CharField(blank=True, max_length=200, null=True, verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('condition', models.CharField(choices=[('brand_new', 'Brand new'), ('used', 'Used')], max_length=9, verbose_name='Condition')),
                ('first_name', models.CharField(max_length=35, verbose_name='First name')),
                ('phonenumber', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='Phonenumber')),
                ('email', models.EmailField(max_length=60, verbose_name='Email')),
                ('delivery', models.BooleanField(default=False, verbose_name='Delivery')),
                ('mark', models.CharField(blank=True, choices=[('BMW', 'BMW'), ('volkswagen', 'Volksvagen'), ('opel', 'Opel'), ('audi', 'Audi'), ('mercedes-benz', 'Mercedes-benz'), ('toyota', 'Toyota')], max_length=13, null=True, verbose_name='Mark')),
                ('part_type', models.CharField(choices=[('accessories', 'Accessories'), ('audio_equipment', 'Audio equipment'), ('filters', 'Filters'), ('interior_items', 'Interior items'), ('wheels', 'Wheels'), ('tires', 'Tires'), ('heating/ventilation/conditioning', 'Heating/ventilation/conditioning'), ('lighting', 'Lighting'), ('gearbox', 'Gearbox'), ('engine', 'Engine'), ('electric_system', 'Electric system'), ('braking_system', 'Braking system'), ('equipment', 'Equipment'), ('other', 'Other')], max_length=32, verbose_name='Type of part')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cities_light.City', verbose_name='City')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Motorcycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('raise_list_times', models.PositiveSmallIntegerField(default=0)),
                ('colorful_list_days', models.DateField(blank=True, null=True, verbose_name='Colorful list days')),
                ('promo_days', models.DateField(blank=True, null=True, verbose_name='Promoted days')),
                ('slug', models.SlugField(max_length=160)),
                ('views', models.PositiveIntegerField(default=0)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='Price')),
                ('currency', models.CharField(choices=[('PLN', 'PLN'), ('EUR', 'EUR')], default='PLN', max_length=3, verbose_name='Currency')),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='Published day')),
                ('negotiate', models.BooleanField(default=False, verbose_name='Is price to negotiate')),
                ('title', models.CharField(blank=True, max_length=200, null=True, verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('mark', models.CharField(choices=[('BMW', 'BMW'), ('volkswagen', 'Volksvagen'), ('opel', 'Opel'), ('audi', 'Audi'), ('mercedes-benz', 'Mercedes-benz'), ('toyota', 'Toyota')], max_length=13, verbose_name='Mark')),
                ('condition', models.CharField(choices=[('brand_new', 'Brand new'), ('used', 'Used')], max_length=9, verbose_name='Condition')),
                ('first_name', models.CharField(max_length=35, verbose_name='First name')),
                ('phonenumber', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='Phonenumber')),
                ('email', models.EmailField(max_length=60, verbose_name='Email')),
                ('first_owner', models.BooleanField(default=False, verbose_name='Is first owner')),
                ('youtube_link', models.URLField(blank=True, null=True, verbose_name='Youtube video')),
                ('registeration_num', models.CharField(blank=True, max_length=15, null=True, verbose_name='Registeration number')),
                ('mileage', models.PositiveIntegerField(verbose_name='Mileage')),
                ('power', models.PositiveIntegerField(verbose_name='Power')),
                ('color', models.CharField(choices=[('black', 'Black'), ('Brown', 'Brown'), ('purple', 'Purple'), ('red', 'Red'), ('blue', 'Blue'), ('white', 'White'), ('gold', 'Gold'), ('silver', 'Silver'), ('grey', 'Grey'), ('yellow', 'Yellow'), ('green', 'Green'), ('other_color', 'Other color')], max_length=11, verbose_name='Color')),
                ('country_of_origin', django_countries.fields.CountryField(max_length=2)),
                ('gearbox', models.CharField(choices=[('manual', 'Manual'), ('automatic', 'Automatic'), ('half-automatic', 'Half-automatic')], max_length=14, verbose_name='Gearbox')),
                ('year_production', models.CharField(choices=[('2020', 2020), ('2019', 2019), ('2018', 2018), ('2017', 2017), ('2016', 2016), ('2015', 2015), ('2014', 2014), ('2013', 2013), ('2012', 2012), ('2011', 2011), ('2010', 2010), ('1999', 1999), ('1998', 1998), ('1997', 1997), ('1996', 1996), ('1995', 1995), ('1994', 1994), ('1993', 1993), ('1992', 1992), ('1991', 1991), ('1990', 1990)], max_length=4, verbose_name='Year production')),
                ('motorcycle_type', models.CharField(choices=[('chopper', 'Chopper'), ('cruiser', 'Cruiser'), ('enduro', 'Enduro'), ('patch', 'Patch'), ('moped', 'Moped'), ('naked', 'Naked'), ('quad', 'Quad'), ('scooter', 'Scooter'), ('sporty', 'Sporty'), ('tourist', 'Tourist')], max_length=7, verbose_name='Type of motocycle')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cities_light.City', verbose_name='City')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='motorcycles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='images/cars/%Y/%m/%d/')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('raise_list_times', models.PositiveSmallIntegerField(default=0)),
                ('colorful_list_days', models.DateField(blank=True, null=True, verbose_name='Colorful list days')),
                ('promo_days', models.DateField(blank=True, null=True, verbose_name='Promoted days')),
                ('slug', models.SlugField(max_length=160)),
                ('views', models.PositiveIntegerField(default=0)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='Price')),
                ('currency', models.CharField(choices=[('PLN', 'PLN'), ('EUR', 'EUR')], default='PLN', max_length=3, verbose_name='Currency')),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='Published day')),
                ('negotiate', models.BooleanField(default=False, verbose_name='Is price to negotiate')),
                ('title', models.CharField(blank=True, max_length=200, null=True, verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('mark', models.CharField(choices=[('BMW', 'BMW'), ('volkswagen', 'Volksvagen'), ('opel', 'Opel'), ('audi', 'Audi'), ('mercedes-benz', 'Mercedes-benz'), ('toyota', 'Toyota')], max_length=13, verbose_name='Mark')),
                ('condition', models.CharField(choices=[('brand_new', 'Brand new'), ('used', 'Used')], max_length=9, verbose_name='Condition')),
                ('first_name', models.CharField(max_length=35, verbose_name='First name')),
                ('phonenumber', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='Phonenumber')),
                ('email', models.EmailField(max_length=60, verbose_name='Email')),
                ('first_owner', models.BooleanField(default=False, verbose_name='Is first owner')),
                ('youtube_link', models.URLField(blank=True, null=True, verbose_name='Youtube video')),
                ('registeration_num', models.CharField(blank=True, max_length=15, null=True, verbose_name='Registeration number')),
                ('mileage', models.PositiveIntegerField(verbose_name='Mileage')),
                ('power', models.PositiveIntegerField(verbose_name='Power')),
                ('color', models.CharField(choices=[('black', 'Black'), ('Brown', 'Brown'), ('purple', 'Purple'), ('red', 'Red'), ('blue', 'Blue'), ('white', 'White'), ('gold', 'Gold'), ('silver', 'Silver'), ('grey', 'Grey'), ('yellow', 'Yellow'), ('green', 'Green'), ('other_color', 'Other color')], max_length=11, verbose_name='Color')),
                ('country_of_origin', django_countries.fields.CountryField(max_length=2)),
                ('gearbox', models.CharField(choices=[('manual', 'Manual'), ('automatic', 'Automatic'), ('half-automatic', 'Half-automatic')], max_length=14, verbose_name='Gearbox')),
                ('year_production', models.CharField(choices=[('2020', 2020), ('2019', 2019), ('2018', 2018), ('2017', 2017), ('2016', 2016), ('2015', 2015), ('2014', 2014), ('2013', 2013), ('2012', 2012), ('2011', 2011), ('2010', 2010), ('1999', 1999), ('1998', 1998), ('1997', 1997), ('1996', 1996), ('1995', 1995), ('1994', 1994), ('1993', 1993), ('1992', 1992), ('1991', 1991), ('1990', 1990)], max_length=4, verbose_name='Year production')),
                ('right_hand_drive', models.BooleanField(default=False, verbose_name='right hand drive (England)')),
                ('num_of_doors', models.PositiveIntegerField(blank=True, null=True, verbose_name='number of doors')),
                ('num_of_seats', models.PositiveIntegerField(blank=True, null=True, verbose_name='number of seats')),
                ('drive', models.CharField(blank=True, choices=[('4x4-auto', '4x4 (included automatically)'), ('4x4-manually', '4x4 (included manually)'), ('4x4-constant', '4x4 (constant)'), ('front-wheels', 'Front wheels'), ('back-wheels', 'Back wheels')], max_length=12, null=True, verbose_name='Drive')),
                ('fuel_type', models.CharField(choices=[('petrol', 'Petrol'), ('disel', 'Disel'), ('petrol+LPG', 'Petrol+LPG'), ('petrol+CNG', 'Petrol+CNG'), ('electric', 'Electric'), ('etanol', 'Etanol'), ('hybrid', 'Hybrid'), ('hydrogen', 'Hydrogen')], max_length=10, verbose_name='Fuel type')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cities_light.City', verbose_name='City')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
